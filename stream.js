const stream = require('stream');

// 什么是流
// 流是用于在 Node.js 中处理流数据的抽象接口。 stream 模块提供了用于实现流接口的 API。
// Node.js 提供了许多流对象

// 一种以高效的方式处理读写文件，网络通信，或是任何类型的端到端信息交换
// 如何高效？
// 传统的文件处理中，会将文件从头倒胃全部读入内存，然后进行处理
// stream 则可以逐个片段的读取并处理，无需全部保存到内存中
// Node.js 的 stream 提供了构建所有流的API，所有流都是 EventEmitter 的实例。

// 有什么优点？ 因为可以逐段的进行读写处理
// 内存效率: 无需加载大量的数据到内存中即可进行处理。
// 时间效率: 当获得数据之后即可立即开始处理数据，这样所需的时间更少，而不必等到整个数据有效负载可用才开始。

// pipe  管道
// 获取来源流，通过管道传输到目标流。可以保持读写的一致性，和数据丢失问题

// Node 许多核心模块提供了原生的流处理功能

// 流分为四类： 可读流， 可写流， 双工流（可读可写）， 转换流
// Readable: 可以通过管道读取、但不能通过管道写入的流（可以接收数据，但不能向其发送数据）。 当推送数据到可读流中时，会对其进行缓冲，直到使用者开始读取数据为止。
// Writable: 可以通过管道写入、但不能通过管道读取的流（可以发送数据，但不能从中接收数据）。
// Duplex: 可以通过管道写入和读取的流，基本上相对于是可读流和可写流的组合。
// Transform: 类似于双工流、但其输出是其输入的转换的转换流。
